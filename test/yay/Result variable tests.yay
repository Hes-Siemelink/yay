Test case: Output

Output: a result

Expected output: a result


---
Test case: Set variable

Set variable:
  output: something

Expected output: something


---
Test case: Set variable with 'Set'

Output: a different result
Set: var

Assert equals:
- actual: ${var}
  expected: a different result


---
Test case: Set variable with 'As'

Output: some more contents
As: var3

Assert equals:
- actual: ${var3}
  expected: some more contents


---
Test case: Output variable assignment

${var}: something
${output}: ${var}

Expected output: something


---
Test case: Output from for each

Output: something

For each:
  item:
  - one
  - two
  - three
  Do:
  - ${output}: ${output} ${item}

Expected output: something one two three


---
Test case: Make sure variables are resolved at right time in Do command

${output}: something else
${test}: []

For each:
  recipe:
    - Mango ice cream
    - Ratatouille
    - Meatballs
  Do:
    ${output}: ${recipe}
    Join:
      test:
      - ${output}

Assert equals:
- actual: ${test}
  expected:
    - Mango ice cream
    - Ratatouille
    - Meatballs


---
Test case: variable in For each

${items}:
  - One
  - Two
  - Three
${test_result}: []

For each:
  item: ${items}
  Do:
    Join:
      test_result:
      - (${item})

Assert equals:
  - actual: ${test_result}
    expected:
      - (One)
      - (Two)
      - (Three)

---
Test case: Output should be a list when invoking a handler with a list

Output:
  - one
  - two
  - three

Expected output:
  - one
  - two
  - three

---
Test case: Use numbers in interpolation

${number}: 2
Output: Number ${number}

Expected output: Number 2
